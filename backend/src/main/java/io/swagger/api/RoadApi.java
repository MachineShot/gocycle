/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.26).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Road;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-03-29T15:47:54.662Z")

@Validated
@Api(value = "road", description = "the road API")
@RequestMapping(value = "/k043/gocycle/1.0.0")
public interface RoadApi {

    @ApiOperation(value = "Add a new road to the API", nickname = "addRoad", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:roads", description = "read your indicators"),
            @AuthorizationScope(scope = "write:roads", description = "modify indicators in your account")
            })
    }, tags={ "road", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/road",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addRoad(@ApiParam(value = "Road object that needs to be added to the store" ,required=true )  @Valid @RequestBody Road body);


    @ApiOperation(value = "Deletes a road", nickname = "deleteRoad", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:roads", description = "read your indicators"),
            @AuthorizationScope(scope = "write:roads", description = "modify indicators in your account")
            })
    }, tags={ "road", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Road not found") })
    @RequestMapping(value = "/road/{roadId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRoad(@ApiParam(value = "Road id to delete",required=true) @PathVariable("roadId") Long roadId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "Find road by ID", nickname = "getRoadById", notes = "Returns a single road", response = Road.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "road", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Road.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Road not found") })
    @RequestMapping(value = "/road/{roadId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Road> getRoadById(@ApiParam(value = "ID of road to return",required=true) @PathVariable("roadId") Long roadId);


    @ApiOperation(value = "Update an existing road", nickname = "updateRoad", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:roads", description = "read your indicators"),
            @AuthorizationScope(scope = "write:roads", description = "modify indicators in your account")
            })
    }, tags={ "road", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Road not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/road",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateRoad(@ApiParam(value = "Road object that needs to be added" ,required=true )  @Valid @RequestBody Road body);


    @ApiOperation(value = "Updates a road in the store with form data", nickname = "updateRoadWithForm", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:roads", description = "read your indicators"),
            @AuthorizationScope(scope = "write:roads", description = "modify indicators in your account")
            })
    }, tags={ "road", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/road/{roadId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateRoadWithForm(@ApiParam(value = "ID of road that needs to be updated",required=true) @PathVariable("roadId") Long roadId,@ApiParam(value = "Updated name of the road") @RequestParam(value="name", required=false)  String name,@ApiParam(value = "Updated status of the road") @RequestParam(value="status", required=false)  String status);

}

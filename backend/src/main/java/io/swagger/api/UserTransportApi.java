/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.26).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.UserTransport;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-03-29T15:47:54.662Z")

@Validated
@Api(value = "user_transport", description = "the user_transport API")
@RequestMapping(value = "/k043/gocycle/1.0.0")
public interface UserTransportApi {

    @ApiOperation(value = "Add a new user_transport to the API", nickname = "addUserTransport", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:user_transports", description = "read your indicators"),
            @AuthorizationScope(scope = "write:user_transports", description = "modify indicators in your account")
            })
    }, tags={ "user_transport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/user_transport",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addUserTransport(@ApiParam(value = "User_transport object that needs to be added to the store" ,required=true )  @Valid @RequestBody UserTransport body);


    @ApiOperation(value = "Deletes a user_transport", nickname = "deleteUserTransport", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:user_transports", description = "read your indicators"),
            @AuthorizationScope(scope = "write:user_transports", description = "modify indicators in your account")
            })
    }, tags={ "user_transport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "User_transport not found") })
    @RequestMapping(value = "/user_transport/{user_transportId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserTransport(@ApiParam(value = "User_transport id to delete",required=true) @PathVariable("user_transportId") Long userTransportId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "Find user_transport by ID", nickname = "getUserTransportById", notes = "Returns a single user_transport", response = UserTransport.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "user_transport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserTransport.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "User_transport not found") })
    @RequestMapping(value = "/user_transport/{user_transportId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserTransport> getUserTransportById(@ApiParam(value = "ID of user_transport to return",required=true) @PathVariable("user_transportId") Long userTransportId);


    @ApiOperation(value = "Update an existing user_transport", nickname = "updateUserTransport", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:user_transports", description = "read your indicators"),
            @AuthorizationScope(scope = "write:user_transports", description = "modify indicators in your account")
            })
    }, tags={ "user_transport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "User_transport not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/user_transport",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUserTransport(@ApiParam(value = "User_transport object that needs to be added" ,required=true )  @Valid @RequestBody UserTransport body);


    @ApiOperation(value = "Updates a user_transport in the store with form data", nickname = "updateUserTransportWithForm", notes = "", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:user_transports", description = "read your indicators"),
            @AuthorizationScope(scope = "write:user_transports", description = "modify indicators in your account")
            })
    }, tags={ "user_transport", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/user_transport/{user_transportId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> updateUserTransportWithForm(@ApiParam(value = "ID of user_transport that needs to be updated",required=true) @PathVariable("user_transportId") Long userTransportId,@ApiParam(value = "Updated name of the user_transport") @RequestParam(value="name", required=false)  String name,@ApiParam(value = "Updated status of the user_transport") @RequestParam(value="status", required=false)  String status);

}
